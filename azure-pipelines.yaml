# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    # - displayName: Setup ansible
    - task: Bash@3
      inputs:
        filePath: azure-ansible.sh
    # - displayName: Setup environment dependencies
    - task: Bash@3
      inputs:
        filePath: pipeline-setup.sh 
    # - displayName: git secret check
    - script: |
        echo 'running trufflehog to check project history for secrets'
        trufflehog --regex --entropy=False --max_depth=3 https://github.com/pawnu/secDevLabs
    # - displayName: SCA
    - script: |
        echo 'running python safety check on requirements.txt file'
        safety check -r ./owasp-top10-2017-apps/a7/gossip-world/app/requirements.txt
      continueOnError: true 
    # - displayName: SAST
    - script: |
        echo 'Testing source code for security bugs and vulnerabilities'
        bandit -r ./owasp-top10-2017-apps/a7/gossip-world/app/ -ll || true
      continueOnError: true 
    # - displayName: Container audit
    - script: |
        echo 'Audit the dockerfile used to spin up the web application'
        if [ -f "./lynis/lynis" ]
        then 
          echo 'lynis already exists'
        else
          wget https://downloads.cisofy.com/lynis/lynis-2.7.5.tar.gz
          tar xfvz lynis-2.7.5.tar.gz -C ./
          rm lynis-2.7.5.tar.gz
        fi
        
        cd lynis
        mkdir $(System.DefaultWorkingDirectory)/$(Build.BuildId)/
        ./lynis audit dockerfile $(System.DefaultWorkingDirectory)/owasp-top10-2017-apps/a7/gossip-world/deployments/Dockerfile | ansi2html > $(System.DefaultWorkingDirectory)/$(Build.BuildId)/docker-report.html
        mv /tmp/lynis.log $(System.DefaultWorkingDirectory)/$(Build.BuildId)/docker_lynis.log
        mv /tmp/lynis-report.dat $(System.DefaultWorkingDirectory)/$(Build.BuildId)/docker_lynis-report.dat
      continueOnError: true 
    # - displayName: Setup test env
    - script: |
        #refresh inventory
        echo "[local]" > ~/ansible_hosts
        echo "localhost ansible_connection=local" >> ~/ansible_hosts
        echo "[tstlaunched]" >> ~/ansible_hosts
        
        tar cvfz pythonapp.tar.gz -C $(System.DefaultWorkingDirectory)/owasp-top10-2017-apps/a7/ .

        ssh-keygen -t rsa -N "" -f ~/.ssh/psp_ansible_key || true
        ansible-playbook -i ~/ansible_hosts ./jenkins_home/createAwsEc2.yml
        testenv=$(sed -n '/tstlaunched/{n;p;}' ~/ansible_hosts)
        echo "${testenv}"
        
        ansible-playbook -i ~/ansible_hosts ./jenkins_home/configureTestEnv.yml
    # - displayName: DAST
    - script: |
        testenv=$(sed -n '/tstlaunched/{n;p;}' ~/ansible_hosts)
        echo $testenv
        python ./jenkins_home/authDAST.py 0.0.0.0 $testenv $(System.DefaultWorkingDirectory)/$(Build.BuildId)/DAST_results.html
      continueOnError: true 
    # - displayName: System security audit
    - script: |
        echo 'Run lynis audit on host and fetch result'
        ansible-playbook -i ~/ansible_hosts ./jenkins_home/hostaudit.yml --extra-vars "logfolder=$(System.DefaultWorkingDirectory)/$(Build.BuildId)/"
      continueOnError: true 
    # - displayName: Deploy WAF
    - script: |
        echo 'Deploy modsecurity as reverse proxy'
        ansible-playbook -i ~/ansible_hosts ./jenkins_home/configureWAF.yml
      continueOnError: true 
    # - displayName: Cleanup
    - script: |
        ansible-playbook -i ~/ansible_hosts ./jenkins_home/killec2.yml

